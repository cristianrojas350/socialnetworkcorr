import { Injectable } from '@nestjs/common';
import { InjectRepository } from '@nestjs/typeorm';
import { Repository } from 'typeorm';
import * as bcrypt from 'bcryptjs';
import { User } from '../entities/user.entity';
import { Post } from '../entities/post.entity';

@Injectable()
export class SeederService {
  constructor(
    @InjectRepository(User)
    private userRepository: Repository<User>,
    @InjectRepository(Post)
    private postRepository: Repository<Post>,
  ) {}

  async seed() {
    console.log('üå± Iniciando seeder...');

    // Crear usuarios de prueba
    const users = await this.createUsers();
    
    // Crear publicaciones de prueba
    await this.createPosts(users);

    console.log('‚úÖ Seeder completado exitosamente');
  }

  private async createUsers(): Promise<User[]> {
    const usersData = [
      {
        firstName: 'Juan',
        lastName: 'P√©rez',
        alias: 'juanperez',
        email: 'juan@ejemplo.com',
        password: 'password123',
        birthDate: new Date('1990-01-15'),
      },
      {
        firstName: 'Mar√≠a',
        lastName: 'Garc√≠a',
        alias: 'mariagarcia',
        email: 'maria@ejemplo.com',
        password: 'password123',
        birthDate: new Date('1992-05-20'),
      },
      {
        firstName: 'Carlos',
        lastName: 'L√≥pez',
        alias: 'carloslopez',
        email: 'carlos@ejemplo.com',
        password: 'password123',
        birthDate: new Date('1988-12-10'),
      },
      {
        firstName: 'Ana',
        lastName: 'Mart√≠nez',
        alias: 'anamartinez',
        email: 'ana@ejemplo.com',
        password: 'password123',
        birthDate: new Date('1995-08-03'),
      },
      {
        firstName: 'Luis',
        lastName: 'Rodr√≠guez',
        alias: 'luisrodriguez',
        email: 'luis@ejemplo.com',
        password: 'password123',
        birthDate: new Date('1991-03-25'),
      },
    ];

    const users: User[] = [];

    for (const userData of usersData) {
      const existingUser = await this.userRepository.findOne({
        where: { email: userData.email },
      });

      if (!existingUser) {
        const hashedPassword = await bcrypt.hash(userData.password, 10);
        const user = this.userRepository.create({
          ...userData,
          password: hashedPassword,
        });
        const savedUser = await this.userRepository.save(user);
        users.push(savedUser);
        console.log(`üë§ Usuario creado: ${userData.email}`);
      } else {
        users.push(existingUser);
      }
    }

    return users;
  }

  private async createPosts(users: User[]) {
    const postsData = [
      '¬°Hola mundo! Esta es mi primera publicaci√≥n en la red social.',
      'Hoy es un d√≠a incre√≠ble para compartir momentos especiales.',
      'Acabo de descubrir esta nueva red social y me encanta.',
      'Compartiendo mis pensamientos del d√≠a con todos ustedes.',
      'La tecnolog√≠a nos conecta de maneras incre√≠bles.',
      '¬°Qu√© bueno estar aqu√≠ compartiendo con amigos!',
      'Cada d√≠a es una nueva oportunidad para conectar.',
      'Las redes sociales han cambiado la forma en que nos comunicamos.',
      'Me encanta poder expresarme libremente aqu√≠.',
      'Gracias por crear esta incre√≠ble plataforma.',
    ];

    for (let i = 0; i < users.length; i++) {
      const user = users[i];
      const postMessage = postsData[i % postsData.length];
      
      const existingPost = await this.postRepository.findOne({
        where: { authorId: user.id, message: postMessage },
      });

      if (!existingPost) {
        const post = this.postRepository.create({
          message: postMessage,
          authorId: user.id,
        });
        await this.postRepository.save(post);
        console.log(`üìù Publicaci√≥n creada para: ${user.email}`);
      }
    }
  }
} 